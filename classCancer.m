function [y1] = classCancer(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Aug-2022 12:57:29.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 9xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.gain = [2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.3335635259720430845;1.309446160245926416;-0.81793731874049380171;-0.43862487071499950408;-0.24914995064702638583;0.37121412884295013068;-1.0285617980679617744;1.3554001185310911026;1.6625263933720952902];
IW1_1 = [0.6267130431892906639 -0.46497513360583858644 0.99125122881182547996 0.63247787215862960597 -0.090603050713456756426 -0.52554450836664023949 -0.48151988701200693077 0.90390551796046669786 -1.0591048625230867763;-0.61713838076014437828 -0.5791847739163914488 0.26864953463234292341 -0.63949399313607624418 -0.4371356417959170737 -0.94826882089523545361 0.090343477692402057722 -0.39337539866875476102 0.89030591523484792216;0.96507089163404524701 0.78778153079857404784 -0.33903899775046864029 0.60415756156139810429 -0.70048303086640606452 0.5955975187498935286 0.052418913536705372125 -0.44484776648082430262 -0.68913063776447247566;0.005579784887679344052 0.42169246130120446869 0.35995192794675368031 -1.0629135428908664807 -0.14388172826232351054 -0.82845690662065796239 0.20774974822211333958 0.59406292635083013387 -0.75381159531651720229;0.12597198420542088382 -0.93117926481489354806 -0.043365745921014380027 0.58947791583490782852 -0.6123748659682407558 -0.55803447212521606335 -0.37186201009057845424 0.49828339842487412437 -0.95018564939282823545;1.0637521291307108218 -0.65030876148684324534 -0.6395349593977024405 0.47898870014631994563 0.4707229471183054792 -0.79459557301019778652 -0.47854252948894326902 -0.23213784384216401557 -0.24089733047420769374;-0.25988378832788083805 -0.3810261970794527886 -0.018417514704947068882 -0.65664828146522280505 -0.76460117429165430636 -0.79736455854232046736 -0.78507126192099840889 0.37858868658234168247 0.74079770807039957425;0.12408568529053008722 0.13165944578770458206 0.76423491208022742427 0.6106485094161259175 -0.58408525726864490846 -0.73407541091245287479 0.53407023587649782304 -0.76044436210927202069 -0.62724431182630890902;0.99583859683386477535 0.6363349587720171785 0.81533711963677735213 -0.488139954595735448 -0.61302787983321438414 0.7828887293735471431 0.0098377357384829833276 0.60125136774656007255 0.88979670925254350511];

% Layer 2
b2 = [-1.0777522563564130298;0.28160740587364935239];
LW2_1 = [-1.006772920227540391 -0.52235101731609423492 -0.75428894625032227861 0.1601022738328854722 -0.027261153442988548395 0.38418557586663248937 1.070218767733981835 0.058109256955135892009 -1.8038651316245104539;0.1509652691818736403 -0.68540208610883146534 0.022523809719477837221 -0.29872403628705879175 -0.96402471756332652753 -0.03582148019020047619 -0.065254056827564702048 0.36735532556990363462 0.62341929754084668414];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
