function [y1,xf1,xf2] = heatPredict(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 28-Aug-2022 12:16:18.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 1x10 matrix, initial 10 delay states for input #1.
%   xi2 = 1x10 matrix, initial 10 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x10 matrix, final 10 delay states for input #1.
%   xf2 = 1x10 matrix, final 10 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.10005532;
x1_step1.gain = 3.33365297509276;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 92.8154;
x2_step1.gain = 0.231867928028195;
x2_step1.ymin = -1;

% Layer 1
b1 = [1.9764024208332040544;1.4450989838896692863;-0.98921661330353716224;0.2892270390691319415;-0.49444439761346337114;0.24719053396708834391;-1.7984130901410484427];
IW1_1 = [-0.91617589982679570326 -1.3106069435088747444 -0.91648080522947872328 -1.7728855706377768531 0.21635183123298923347 0.55367444655518183172 0.15750922174379144991 1.3066018039916869053 -0.03957384351200446404 -0.36910853825796180461;-0.66714347993837497253 1.2550357372378773135 -0.60377914093383822092 -0.65031379569604907953 -0.91103239632170207596 3.0374085221062308015 0.088869280967188102327 0.36189515619590079121 0.49108316188077855147 -2.1769559295713079017;1.1668984787032317119 -0.21632400059192644082 0.53397441158249370208 -1.2054385379508569809 -0.01398249627543188614 -0.42383912123982286912 -0.4875375392282697562 -0.40523426821143548882 0.32276948909993119496 0.28417090088007790349;-1.169162289514684927 -0.35472781889481186379 -1.0047759800969360278 -0.3802651759879768778 0.69097104790995067525 0.2201011006479866583 0.040714701470222713908 -0.18636195926065118877 0.20095658033407243215 0.335866399095002377;0.2207922324921850199 0.34383940785230704407 0.2352347042185883863 0.3217338655704937711 -0.033515144777391842057 -0.23523260496399495123 -0.091607718200008847464 -0.020921761331374695569 -0.056911805335679674367 -0.1146488676217859437;-0.069657809880042970141 -0.021240870497618254131 -0.020283489288224945679 0.015078999593003263729 0.021840141334373258664 0.090983355419883477078 -0.0081006017214599532195 -0.010328296963824146193 -0.00113459548916344799 -0.008147312117013425295;0.011444182005859074303 0.26079160746486884648 0.20963973901096985553 -0.10292053724252464564 -0.0031622206627598126172 -0.15130187832315827867 -0.60948925622965144377 -0.4192463648004481902 -0.12955089482939860512 -0.34327442023666648874];
IW1_2 = [-0.88468608830418704603 1.1721572392805303942 0.51054147501311830659 0.41956239752081025962 -0.16113383521788332553 -1.0081529514670308778 -1.1420292261552249524 -1.2469074308204162183 -1.506029052781273414 -1.4559726929031722165;-0.82119826811586449367 -1.0750087035500734967 -0.086669105362105938739 -0.17572658726404599694 0.64702565147999657746 -0.086752353380875307787 0.25149865478675709207 0.56346618987749641505 -0.23887875255157894894 -1.7035831961625802489;1.0734954651334143172 0.1664048723546779629 -0.32464174053377842233 -4.2012085115131245772 1.6882552858193142775 -1.4060624851637284483 1.2013359199647402065 -1.6379463483824245884 2.4408276059430771276 -1.7241422904128218541;2.3655011805110683909 -0.87810229259701644278 -1.9826013809464033688 0.15063448360483405741 2.5544177095720734805 0.24661596038181421431 -0.68279440252093770436 0.06167561802013318828 0.10141086856116279802 0.23426284802860708467;0.84259130927088154994 -1.3814716892311476037 0.1831020470491390717 0.42281748470307051191 0.30917695773316988817 -1.2423919351955603485 0.414589224248849475 -0.21613575512973923209 -0.25188561079961141465 0.13325429860786630609;-1.2753878639468188005 0.75663248631825574808 -0.16880638410809800654 0.11262271435008167075 -0.28325077863968300962 0.44305909195609599616 -0.33065536432506437148 0.11898022409738820415 0.061506967444003149414 -0.039896971205240480685;-1.2095221598409793273 -0.13691108381052732867 -0.5460754765428526003 -0.24579960701674272161 0.49307022496761138131 -1.584645741815000175 -1.3111811432801585564 -0.27090029999427600593 0.5072902543089373717 -0.55733246516351497846];

% Layer 2
b2 = 0.12032428185540179622;
LW2_1 = [0.0011287067889486600281 -0.0062211164868872636385 -0.10558236015029705268 -0.042971570249322008084 -0.49888253549067929082 -1.1919153297900033639 0.15025676931759010535];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.231867928028195;
y1_step1.xoffset = 92.8154;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),10,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
