function [y1] = systemModelEstimation(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Aug-2022 12:07:47.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [0.04;0.04;0.04];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.66090986350745950517;2.5727878807578670184;-0.66069714055043482492;0.90894949951384285125;-0.66098798042684625553];
IW1_1 = [0.080411457886984658017 -0.040403607041944920863 -0.039852409920634407348;2.3313068558639238326 2.3092234975395138363 2.523767344723534034;-0.040342338511588582417 -0.039722737417443317043 0.080060616217303468001;-0.33017484433399491017 -0.32409516494656737118 -1.4032998663505229509;-0.039751727292091504351 0.080377549558087749149 -0.040469995148850468336];

% Layer 2
b2 = 228.98324914087217508;
LW2_1 = [132.17575612924918005 0.00027430466905723518674 132.76577336614033698 -0.0019795907131585233768 132.25737362528477092];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.000392156862745098;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
